;-- =============================================================================
;-- Company      : Unversity of Glasgow, Comuting Science
;-- Author:        Syed Waqar Nabi
;--
;-- Create Date  : 2017.02.28
;-- Project Name : TyTra
;--
;-- Dependencies :
;--
;-- Revision     :
;-- Revision 0.01. File Created
;--
;-- Conventions  : TIr-16
;-- =============================================================================
;--
;-- =============================================================================
;-- General Description
;-- -----------------------------------------------------------------------------
;-- Tytra-IR BACKEND file 2D-shallow water for Gregor's project
;-- =============================================================================
;--
;-- *****************************************************************************
;--                        *** MANAGE-IR ***
;-- *****************************************************************************

;-- C-style macros
#define NDim1     256
#define NLinear   256
#define NLanes    1
#define NLinearPL 1
#define NKIter    1
;-- numner of Kernel Iterations

; =============================================================================
; ** Launchpad
; =============================================================================
define void launch()
{
  ; ---------------------------------------------------------------------------
  ; ** Memory Objects
  ; ---------------------------------------------------------------------------
  @mem_hzero  = addrSpace(1) <NLinear x ui64>,  !"readPorts"  , !1 , !"writePorts" , !1
  @mem_eta    = addrSpace(1) <NLinear x ui64>,  !"readPorts"  , !1 , !"writePorts" , !1
  @mem_etan   = addrSpace(1) <NLinear x ui64>,  !"readPorts"  , !1 , !"writePorts" , !1
  @mem_h      = addrSpace(1) <NLinear x ui64>,  !"readPorts"  , !1 , !"writePorts" , !1
  @mem_wet    = addrSpace(1) <NLinear x ui64>,  !"readPorts"  , !1 , !"writePorts" , !1
  @mem_u      = addrSpace(1) <NLinear x ui64>,  !"readPorts"  , !1 , !"writePorts" , !1
  @mem_un     = addrSpace(1) <NLinear x ui64>,  !"readPorts"  , !1 , !"writePorts" , !1
  @mem_v      = addrSpace(1) <NLinear x ui64>,  !"readPorts"  , !1 , !"writePorts" , !1
  @mem_vn     = addrSpace(1) <NLinear x ui64>,  !"readPorts"  , !1 , !"writePorts" , !1

  ; ---------------------------------------------------------------------------
  ; ** Streaming Objects
  ; ---------------------------------------------------------------------------
  ; NOTE: the extended semantic that allows added context
  ;       also the declaration of constant memories using addrSpace
  @strobj_hzero = addrSpace(10), !"dir", !"in" ,!"memConn" , !"@mem_hzero" ,!"length" , !NLinear  ,!"start" , !0,!"signal" , !"yes", !"stride" , !1
  @strobj_eta   = addrSpace(10), !"dir", !"in" ,!"memConn" , !"@mem_eta  " ,!"length" , !NLinear  ,!"start" , !0,!"signal" , !"yes", !"stride" , !1
  @strobj_etan  = addrSpace(10), !"dir", !"in" ,!"memConn" , !"@mem_etan " ,!"length" , !NLinear  ,!"start" , !0,!"signal" , !"yes", !"stride" , !1
  @strobj_h     = addrSpace(10), !"dir", !"in" ,!"memConn" , !"@mem_h    " ,!"length" , !NLinear  ,!"start" , !0,!"signal" , !"yes", !"stride" , !1
  @strobj_wet   = addrSpace(10), !"dir", !"in" ,!"memConn" , !"@mem_wet  " ,!"length" , !NLinear  ,!"start" , !0,!"signal" , !"yes", !"stride" , !1
  @strobj_u     = addrSpace(10), !"dir", !"in" ,!"memConn" , !"@mem_u    " ,!"length" , !NLinear  ,!"start" , !0,!"signal" , !"yes", !"stride" , !1
  @strobj_un    = addrSpace(10), !"dir", !"in" ,!"memConn" , !"@mem_un   " ,!"length" , !NLinear  ,!"start" , !0,!"signal" , !"yes", !"stride" , !1
  @strobj_v     = addrSpace(10), !"dir", !"in" ,!"memConn" , !"@mem_v    " ,!"length" , !NLinear  ,!"start" , !0,!"signal" , !"yes", !"stride" , !1
  @strobj_vn    = addrSpace(10), !"dir", !"in" ,!"memConn" , !"@mem_vn   " ,!"length" , !NLinear  ,!"start" , !0,!"signal" , !"yes", !"stride" , !1

  ; ---------------------------------------------------------------------------
  call @main()
}

; *****************************************************************************
;                        *** COMPUTE-IR ***
; *****************************************************************************

; ModuleID = 'top'
  ; top level module for LLVM

; =============================================================================
; ** GLOBAL VARIABLES (PORTS)
; =============================================================================

@main.hzero  = addrSpace(12) ui64, !"istream", !"CONT", !0, !"strobj_hzero"
@main.eta    = addrSpace(12) ui64, !"istream", !"CONT", !0, !"strobj_eta  "
@main.etan   = addrSpace(12) ui64, !"istream", !"CONT", !0, !"strobj_etan "
@main.h      = addrSpace(12) ui64, !"istream", !"CONT", !0, !"strobj_h    "
@main.wet    = addrSpace(12) ui64, !"istream", !"CONT", !0, !"strobj_wet  "
@main.u      = addrSpace(12) ui64, !"istream", !"CONT", !0, !"strobj_u    "
@main.un     = addrSpace(12) ui64, !"istream", !"CONT", !0, !"strobj_un   "
@main.v      = addrSpace(12) ui64, !"istream", !"CONT", !0, !"strobj_v    "
@main.vn     = addrSpace(12) ui64, !"istream", !"CONT", !0, !"strobj_vn   "

; =============================================================================
; ** DATAFLOW
; =============================================================================

; -----------------------------------------------------------------------------
; ** DYN-FIRST-LOOP
; -----------------------------------------------------------------------------
;--dt = 8
;--dy =6
;--dx =7
;--g = 10
define void @dyn_first_loop(
    ui64 %eta
  , ui64 %du
  , ui64 %dv
  ) pipe
{
  ui64 %sub  = sub   ui64 0, 8
  ui64 %mul  = mul   ui64 %sub, 10
  ui64 %sub1 = sub   ui64 %eta, %eta
  ui64 %mul2 = mul   ui64 %sub1, %mul
  ui64 %du   = sdiv  ui64 %mul2, 7
  ui64 %sub5 = sub   ui64 %eta, %eta
  ui64 %mul6 = mul   ui64 %sub5, %mul
  ui64 %dv   = sdiv  ui64 %mul6, 6
}

; -----------------------------------------------------------------------------
; ** DYN-SECOND-LOOP
; -----------------------------------------------------------------------------
;--dt = 8
;--dy =6
;--dx =7
;--g = 10
define void @dyn_second_loop(
    ui64 %u
  , ui64 %un
  , ui64 %v
  , ui64 %vn
  , ui64 %du
  , ui64 %dv
  ) pipe
{
    ui64 %un = add ui64 %u, %du
    ui64 %vn = add ui64 %v, %dv
}

; -----------------------------------------------------------------------------
; ** DYN-SECOND-LOOP
; -----------------------------------------------------------------------------
;--dt = 8
;--dy =6
;--dx =7
;--g = 10
define void @dyn_final_loop(
    ui64 %un
  , ui64 %vn
  , ui64 %h
  , ui64 %eta
  , ui64 %etan
  ) pipe
{
;--  %cmp  = icmp sgt i32 %un_jCOLS_k, -1
;--  %sub  = sub nsw i32 0, %un_jCOLS_k
;--  %cond = select i1 %cmp, i32 %un_jCOLS_k, i32 %sub
;-- TODO: Create ABS instruction in TyTra-IR

  ui64 %add    = add   ui64 %un, %un
  ui64 %mul    = mul   ui64 %add, %h
  ui64 %div    = sdiv  ui64 %mul, 2
  ui64 %sub7   = sub   ui64 %un, %un
  ui64 %mul8   = mul   ui64 %sub7, %h
  ui64 %div9   = sdiv  ui64 %mul8, 2

  ;--%cmp11  = icmp sgt i32 %un_jCOLS_k_neg1, -1
  ;--%sub14 = sub nsw i32 0, %un_jCOLS_k_neg1
  ;--%cond16 = select i1 %cmp11, i32 %un_jCOLS_k_neg1, i32 %sub14

  ui64 %add17  = add   ui64 %un, %un
  ui64 %mul18  = mul   ui64 %add17, %h
  ui64 %sub26  = sub   ui64 %un, %un
  ui64 %mul27  = mul   ui64 %sub26, %h

  ;--%cmp30  = icmp sgt i32 %vn_jCOLS_k, -1
  ;--%sub33 = sub nsw i32 0, %vn_jCOLS_k
  ;--%cond35 = select i1 %cmp30, i32 %vn_jCOLS_k, i32 %sub33

  ui64 %add36  = add   ui64 %vn, %vn
  ui64 %mul37  = mul   ui64 %add36, %h
  ui64 %div38  = sdiv  ui64 %mul37, 2
  ui64 %sub45  = sub   ui64 %vn, %vn
  ui64 %mul46  = mul   ui64 %sub45, %h
  ui64 %div47  = sdiv  ui64 %mul46, 2

  ;--%cmp49 = icmp sgt i32 %vn_neg1_jCOLS_k, -1
  ;--%sub52 = sub nsw i32 0, %vn_neg1_jCOLS_k
  ;--%cond54 = select i1 %cmp49, i32 %vn_neg1_jCOLS_k, i32 %sub52

  ui64 %add55  = add  ui64 %vn, %vn
  ui64 %mul56  = mul  ui64 %add55, %h
  ui64 %sub64  = sub  ui64 %vn, %vn
  ui64 %mul65  = mul  ui64 %sub64, %h

  ui64 %div28  = sdiv  ui64 %mul27, -2
  ui64 %div19  = sdiv  ui64 %mul18, -2
  ui64 %add29  = add   ui64 %div28, %div
  ui64 %add10  = add   ui64 %add29, %div9
  ui64 %sub68  = add   ui64 %add10, %div19
  ui64 %mul69  = mul   ui64 %sub68, 8
  ui64 %div70  = sdiv  ui64 %mul69, 7
  ui64 %sub71  = sub   ui64 %eta, %div70
  ui64 %div66  = sdiv  ui64 %mul65, -2
  ui64 %div57  = sdiv  ui64 %mul56, -2
  ui64 %add67  = add   ui64 %div66, %div38
  ui64 %add48  = add   ui64 %add67, %div47
  ui64 %sub72  = add   ui64 %add48, %div57
  ui64 %mul73  = mul   ui64 %sub72, 8
  ui64 %div74  = sdiv  ui64 %mul73, 6
  ui64 %etan   = sub   ui64 %sub71, %div74
;--  ret void
}


; -----------------------------------------------------------------------------
; ** SHAPIRO
; -----------------------------------------------------------------------------
; eps = 15
define void @shapiro(
    ui64 %etan
  , ui64 %wet
  ) pipe
{
  ui64 %add    = add   ui64 %wet, %wet
  ui64 %add1   = add   ui64 %add, %wet
  ui64 %add2   = add   ui64 %add1, %wet
  ui64 %mul    = mul   ui64 %add2, 15
  ui64 %div    = sdiv  ui64 %mul, 4
  ui64 %sub    = sub   ui64 1, %div
  ui64 %mul3   = mul   ui64 %sub, %etan
  ui64 %mul4   = mul   ui64 %etan, %wet
  ui64 %mul5   = mul   ui64 %etan, %wet
  ui64 %add6   = add   ui64 %mul5, %mul4
  ui64 %mul7   = mul   ui64 %add6, 15
  ui64 %div8   = sdiv  ui64 %mul7, 4
  ui64 %mul9   = mul   ui64 %etan, %wet
  ui64 %mul10  = mul   ui64 %etan, %wet
  ui64 %add11  = add   ui64 %mul10, %mul9
  ui64 %mul12  = mul   ui64 %add11, 15
  ui64 %div13  = sdiv  ui64 %mul12, 4
  ui64 %add14  = add   ui64 %div8, %div13
  ui64 %add15  = add   ui64 %add14, %mul3
}


; -----------------------------------------------------------------------------
; ** Main execution pipeline function
; -----------------------------------------------------------------------------
define void @kernelTop(
    ui64 %hzero
  , ui64 %eta
  , ui64 %etan
  , ui64 %h
  , ui64 %wet
  , ui64 %u
  , ui64 %un
  , ui64 %v
  , ui64 %vn
  ) pipe
{

call @dyn_first_loop(
    ui64 %eta
  , ui64 %du
  , ui64 %dv
  ) pipe

call @dyn_second_loop(
    ui64 %u
  , ui64 %un
  , ui64 %v
  , ui64 %vn
  , ui64 %du
  , ui64 %dv
  ) pipe

call @dyn_final_loop(
    ui64 %un
  , ui64 %vn
  , ui64 %h
  , ui64 %eta
  , ui64 %etan
  ) pipe

call @shapiro(
    ui64 %etan
  , ui64 %wet
  ) pipe

}

; -----------------------------------------------------------------------------
; main
; -----------------------------------------------------------------------------
define void @main ()
{
;--call @shapiro(
;--    ui64 %hzero
;--  , ui64 %eta
;--  , ui64 %etan
;--  , ui64 %h
;--  , ui64 %wet
;--  , ui64 %u
;--  , ui64 %un
;--  , ui64 %v
;--  , ui64 %vn
;--  ) pipe


call @kernelTop(
          ui64 %hzero
        , ui64 %eta
        , ui64 %etan
        , ui64 %h
        , ui64 %wet
        , ui64 %u
        , ui64 %un
        , ui64 %v
        , ui64 %vn
        ) pipe
  ret void
}
